{"remainingRequest":"/Users/jakobscharf/IdeaProjects/wematch-signature-generator/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jakobscharf/IdeaProjects/wematch-signature-generator/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jakobscharf/IdeaProjects/wematch-signature-generator/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jakobscharf/IdeaProjects/wematch-signature-generator/src/components/SignatureForm.vue?vue&type=template&id=331458c8&","dependencies":[{"path":"/Users/jakobscharf/IdeaProjects/wematch-signature-generator/src/components/SignatureForm.vue","mtime":1706351674275},{"path":"/Users/jakobscharf/IdeaProjects/wematch-signature-generator/node_modules/cache-loader/dist/cjs.js","mtime":1706349856930},{"path":"/Users/jakobscharf/IdeaProjects/wematch-signature-generator/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1706349863238},{"path":"/Users/jakobscharf/IdeaProjects/wematch-signature-generator/node_modules/cache-loader/dist/cjs.js","mtime":1706349856930},{"path":"/Users/jakobscharf/IdeaProjects/wematch-signature-generator/node_modules/vue-loader/lib/index.js","mtime":1706349863238}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}